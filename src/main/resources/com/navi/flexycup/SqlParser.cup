package com.navi.backend.flexycup;
import java_cup.runtime.*;
import com.navi.backend.csv_controller.*;
import com.navi.ui.*;
import javax.swing.*;
import java.util.*;

parser code
{:
    public ArrayList<FileTextPane> panes = new ArrayList<>();
    public SqlParser(SqlLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        Querys.errors.add(err);
        try {
            while(true){
                if(getScanner().next_token().sym == sym.P_COMA) break;
            }
            parse();
        } catch (Exception e) {
            //throw new RuntimeException(e);
        }
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        Querys.errors.add(err);
    }
    protected int error_sync_size() {
        return 10;
    }

:}

terminal P_COMA, COMA, ASTERISCO, AND, OR, SELECCIONAR, FILTRAR, INSERTAR, ACTUALIZAR,
        ASIGNAR, ELIMINAR, EN, VALORES, CADENA, EQUAL, PARENT_1, PARENT_2;

terminal String ID, REL_OP, DIGIT, PATH;

non terminal instrucciones, instruccion, seleccionar, insertar, actualizar, eliminar;

non terminal String expr;

non terminal ArrayList<String> listV;

non terminal ArrayList<ColumnsQ> listC;

non terminal ArrayList<FiltersQuery> and, or, conditionsP, conditions, filter;

non terminal ArrayList<AssignQuery> asignar;

//Presedencia


start with instrucciones;

instrucciones ::= instruccion
            | instrucciones instruccion
            ;

instruccion ::= seleccionar P_COMA
            | insertar P_COMA
            | actualizar P_COMA
            | eliminar P_COMA
            ;

seleccionar ::= SELECCIONAR ASTERISCO EN PATH:path filter:f
            {:
            path = path.replace(".","/");
            PathQ p = new PathQ(path, pathleft, pathright);
            String q;
            if(f == null){
                q = Querys.select(p);
            }
            else{
                q = Querys.select(p, f);
            }
            if(!q.isEmpty()){
                FileTextPane pane = new FileTextPane(q);
                panes.add(pane);
            }
            :}
            | SELECCIONAR listC:c EN PATH:path filter:f
            {:
            path = path.replace(".","/");
            PathQ p = new PathQ(path, pathleft, pathright);
            String q;
            if(f == null){
                q = Querys.selectC(p, c);
            }
            else{
                q = Querys.select(p, c, f);
            }
            if(!q.isEmpty()){
                FileTextPane pane = new FileTextPane(q);
                panes.add(pane);
            }
            :}
            ;
insertar    ::= INSERTAR EN PATH:path VALORES PARENT_1 listV:v PARENT_2
            {:
            path = path.replace(".","/");
            PathQ p = new PathQ(path, pathleft, pathright);
            Querys.insert(p, v);
            :}
            | INSERTAR EN PATH:path PARENT_1 listC:c PARENT_2 VALORES PARENT_1 listV:v PARENT_2
            {:
            path = path.replace(".","/");
            if(c.size() == v.size()){
                PathQ p = new PathQ(path, pathleft, pathright);
                Querys.insert(p, c, v);
            }
            else{
                TError err = new TError("","Semántico(?","Cantidad de columnas y valores diferentes", cleft, cright);
                Querys.errors.add(err);
            }
            :}
            ;
actualizar  ::= ACTUALIZAR EN PATH:path ASIGNAR asignar:a filter:f
            {:
            path = path.replace(".","/");
            PathQ p = new PathQ(path, pathleft, pathright);
            if(f == null){
                Querys.update(p, a);
            }
            else{
                Querys.update(p, a, f);
            }
            :}
            ;
asignar     ::= ID:id EQUAL expr:e
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            ArrayList<AssignQuery> a = new ArrayList<>();
            AssignQuery as = new AssignQuery(col,e);
            a.add(as);
            RESULT = a;
            :}
            | asignar:a COMA ID:id EQUAL expr:e
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            AssignQuery as = new AssignQuery(col,e);
            a.add(as);
            RESULT = a;
            :}
            ;
eliminar    ::= ELIMINAR EN PATH:path filter:f
            {:
            path = path.replace(".","/");
            PathQ p = new PathQ(path, pathleft, pathright);
            if(f == null){
                Querys.delete(p);
            }
            else{
                Querys.delete(p, f);
            }
            :}
            ;
filter      ::= FILTRAR conditions:cond
            {:
            ArrayList<FiltersQuery> f = new ArrayList<>();
            for (int i = cond.size() - 1; i >= 0; i--) {
                f.add(cond.get(i));
            }
            RESULT = f;
            :}
            |
            ;

conditions  ::= ID:id EQUAL expr:e conditionsP:condP
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, "=", e, 0);
            condP.add(fil);
            RESULT = condP;
            :}
            | ID:id REL_OP:sign expr:e conditionsP:condP
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, sign, e, 0);
            condP.add(fil);
            RESULT = condP;
            :};


conditionsP ::= {:RESULT = new ArrayList<FiltersQuery>();:}
            | AND ID:id EQUAL expr:e and:a
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, "=", e, 2);
            a.add(fil);
            RESULT = a;
            :}
            | AND ID:id REL_OP:sign expr:e and:a
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, sign, e, 2);
            a.add(fil);
            RESULT = a;
            :}
            | OR ID:id EQUAL expr:e or:o
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, "=", e, 3);
            o.add(fil);
            RESULT = o;
            :}
            | OR ID:id REL_OP:sign expr:e or:o
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, sign, e, 3);
            o.add(fil);
            RESULT = o;
            :}
            ;
and         ::= {:RESULT = new ArrayList<FiltersQuery>();:}
            | AND ID:id EQUAL expr:e and:a
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, "=", e, 2);
            a.add(fil);
            RESULT = a;
            :}
            | AND ID:id REL_OP:sign expr:e and:a
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, sign, e, 2);
            a.add(fil);
            RESULT = a;
            :}
            ;
or         ::= {:RESULT = new ArrayList<FiltersQuery>();:}
            | OR ID:id EQUAL expr:e or:o
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, "=", e, 3);
            o.add(fil);
            RESULT = o;
            :}
            | OR ID:id REL_OP:sign expr:e or:o
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            FiltersQuery fil = new FiltersQuery(col, sign, e, 3);
            o.add(fil);
            RESULT = o;
            :}
            ;
listV       ::= expr:e
            {:
            ArrayList<String> v = new ArrayList<>();
            v.add(e);
            RESULT = v;
            :}
            | listV:v COMA expr:e
            {:
            v.add(e);
            RESULT = v;
            :}
            ;
listC       ::= ID:id
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            ArrayList<ColumnsQ> c = new ArrayList<>();
            c.add(col);
            RESULT = c;
            :}
            | listC:c COMA ID:id
            {:
            ColumnsQ col = new ColumnsQ(id, idleft, idright);
            c.add(col);
            RESULT = c;
            :}
            ;

expr        ::= DIGIT:d {:RESULT = d;:}
            | CADENA:s {:RESULT = s.toString().replace("\"","");:}
            ;

